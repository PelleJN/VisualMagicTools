#! C:/Program Files/Nuke16.0v1/nuke-16.0.1.dll -nx
#write_info BakerWrite file:"" format:"1920 1080 1" chans:":rgba.red:rgba.green:rgba.blue:rgba.alpha:" framerange:"1 100" fps:"0" colorspace:"linear" datatype:"16 bit half" transfer:"unknown" views:"main" colorManagement:"Nuke"
version 16.0 v1
Gizmo {
 name NukeBake
 onCreate "bkr_tn = nuke.thisNode()\n\ndef bkr_internal_update_filepath():\n    scriptDir = nuke.script_directory()\n    scriptDirName = nuke.scriptName()\n    scriptName = os.path.splitext(os.path.basename(scriptDirName))\[0]\n    pathToRenders = scriptDir+\"/nukebake/\"+scriptName\n    \n    bakename = bkr_tn.knob('bakename').getValue()\n    \n    # Combine render folder with generated name\n    fullFilePath = pathToRenders+\"/\"+bakename+\"/nukebake_\"+scriptName+\"_\"+bakename+\"_v001_####.exr\"\n    \n    # Set file path\n    bkr_tn.knob('file').setValue(fullFilePath)\n    bkr_tn.knob('see_file').setValue(fullFilePath)\n\n\ndef bkr_internal_get_color():\n    colorname = bkr_tn.knob('bakename').getValue().split('_')\[-1]\n    if colorname in bkr_colors_list:\n        colorhex = bkr_colors_dict\[colorname]\n        return colorhex, colorname\n    else:\n        return False\n\n    \n# Used in read node to update \"Displaying\" tag on main node\ndef bkr_internal_update_displaying():\n    newdisplayvalue = \"Error\"\n    if nuke.toNode('BakerSwitch').knob('which').getValue() == 0: # If in passthrough mode\n        newdisplayvalue = \"<b>None</b>\"\n    else:\n        bakename = nuke.thisNode().parent().knob('bakename').getValue()\n        bakenamecolor = bakename.split('_')\[-1] # Get the last part after being split by _\n        if bakenamecolor in bkr_colors_list: #If the color in the name is a valid color\n            color = bkr_colors_dict\[bakenamecolor]\n            newdisplayvalue = \"<b><font color='\"+color+\"'>\"+bakename+\"</font><b>\"\n        else:\n            newdisplayvalue = \"<b>\"+bakename+\"<b>\"\n    nuke.thisNode().parent().knob('txt_showing').setValue(newdisplayvalue)\n    \n\n# Click the Regenerate button to get an initial name, but only if name field is empty\nif bkr_tn.knob('bakename').getValue() == \"\":\n    bkr_tn.knob('button_rename').execute()\n    \n# Click the \"Refresh\" button in the storage tab to generate the existing library.\nbkr_tn.knob('button_refreshStorage').execute()\n\n\n# Make the DWAA / DWAB compression knob into a slider range 0 - 500\n# tn\['dw_compression_local'].setFlag(0x0000000000000002)\n# tn\['dw_compression_local'].setRange(0,500)"
 knobChanged "# Make sure the things that need to refer to this node\nbkr_tn = nuke.thisNode()\n\n# Update full filepath if bakename is updated\nif nuke.thisKnob().name() == \"bakename\":\n    # Fallback for display not updating\n    if nuke.toNode('BakerSwitch').knob('which').getValue() == 0: #If in passthrough mode\n        nuke.thisNode().knob('txt_showing').setValue(\"<b>None</b>\")\n    \n    bkr_internal_update_filepath() #defined in onCreate\n    \n    # If there's a valid color at the end of the new name\n    if bkr_internal_get_color() != False:\n        labelcolor = bkr_internal_get_color()\[0] # Get color hex\n        nuke.thisNode().knob('store_color').setValue(labelcolor)\n    else:\n        nuke.thisNode().knob('store_color').setValue(\"#FFFFFF\")\n        \n    # If the name has any rendered file, show \"This name is in use\"\n    if bkr_check_for_file(nuke.thisNode().knob('file').getValue(), \"_\"):\n        nuke.thisNode().knob('txt_inUseNotice').setVisible(True)\n    else:\n        nuke.thisNode().knob('txt_inUseNotice').setVisible(False)\n        \n    # Force BakerSwitch to update so its knobChanger triggers\n    #nuke.toNode('BakerSwitch').knob('testbox').setValue(True)\n    #nuke.toNode('BakerSwitch').knob('testbox').setValue(False)"
 autolabel "\"<center>NukeBake\\n\" + \"<b><font color='\"+nuke.thisNode().knob('store_color').getValue()+\"'>\" + nuke.thisNode().knob('bakename').getValue().replace(\"_\", \"\\n\") + \"</font></b>\""
 tile_color 0x777777ff
 addUserKnob {20 tab_Baker l Baker}
 addUserKnob {41 channels T BakerWrite.channels}
 addUserKnob {41 file +INVISIBLE T BakerWrite.file}
 addUserKnob {1 see_file l Location t "This is where your bake will be stored. Currently it is not possible to change this location."}
 addUserKnob {1 bakename l "Bake Name" t "The name your bake will use. Can be set to anything, but duplicates will be overwritten."}
 addUserKnob {22 button_rename l Regenerate t "Press to generate a new random name. The generated name will not be one currently in use by NukeBake, so there is no need to worry about duplicates.\nYou can change which names can be generated by editing A FILE IDK WHICH YET" -STARTLINE T "bkr_generated_name = bkr_main_generate_pair()\n\n#set bakename knob value\nbkr_tn.knob('bakename').setValue(bkr_generated_name)\n\n"}
 addUserKnob {22 button_bake l Bake t "Promts the user for a frame range ane begins rendering, like a normal Write node." T "nuke.toNode(\"BakerWrite\").knob(\"Render\").execute()" +STARTLINE}
 addUserKnob {22 button_read l Read t "Reads from the target location. Useful for if you want to read an already existing bake.\nAlso acts as a reload button." T "# Reload the file\nnuke.toNode('BakerRead').knob(\"reload\").execute()\n\n# Switch to using read over passthrough\nnuke.toNode('BakerSwitch').knob(\"which\").setValue(1)" +STARTLINE}
 addUserKnob {22 button_passthrough l "Live View" t "Switches to passthrough mode, letting you see the input directly instead of reading from the file. If you can see this button, then a file is being read." -STARTLINE +HIDDEN T "#Will be hidden by onKnobChange for the switch, if the switch is already set to 0.\n\n#Set switch to 0\nnuke.toNode('BakerSwitch').knob('which').setValue(0)"}
 addUserKnob {26 txt_showing l Displaying: T <b>None</b>}
 addUserKnob {26 txt_inUseNotice l " " +HIDDEN T "This name is in use\n"}
 addUserKnob {26 spacer3 l "" +STARTLINE T "                        "}
 addUserKnob {26 ""}
 addUserKnob {26 spacer2 l "" +STARTLINE T "                        "}
 addUserKnob {26 txt_filesettings l " " T "<b>Common File Settings</b>"}
 addUserKnob {41 datatype T BakerWrite.datatype}
 addUserKnob {41 compression l "compression type" T BakerWrite.compression}
 addUserKnob {41 dw_compression_level l "dw compression" t "Compression level (only for DWAA and DWAB compression)" T BakerWrite.dw_compression_level}
 addUserKnob {41 colorspace l "output transform" T BakerWrite.colorspace}
 addUserKnob {41 colorspace_1 l "input transform" -STARTLINE T BakerRead.colorspace}
 addUserKnob {26 spacer1 l "" +STARTLINE T "                        "}
 addUserKnob {26 ""}
 addUserKnob {26 spacer4 l "" +STARTLINE T "                        "}
 addUserKnob {20 grp_write l "More File Settings" n 1}
 grp_write 0
 addUserKnob {41 write_ACES_compliant_EXR l "write ACES compliant EXR" T BakerWrite.write_ACES_compliant_EXR}
 addUserKnob {41 autocrop -STARTLINE T BakerWrite.autocrop}
 addUserKnob {41 heroview T BakerWrite.heroview}
 addUserKnob {41 metadata T BakerWrite.metadata}
 addUserKnob {41 noprefix l "do not attach prefix" -STARTLINE T BakerWrite.noprefix}
 addUserKnob {41 interleave T BakerWrite.interleave}
 addUserKnob {41 first_part l "first part" T BakerWrite.first_part}
 addUserKnob {41 "standard layer name format" T "BakerWrite.standard layer name format"}
 addUserKnob {41 write_full_layer_names l "write full layer names" T BakerWrite.write_full_layer_names}
 addUserKnob {41 truncateChannelNames l "truncate channel names" T BakerWrite.truncateChannelNames}
 addUserKnob {41 premultiplied T BakerWrite.premultiplied}
 addUserKnob {41 raw l "raw data" -STARTLINE T BakerWrite.raw}
 addUserKnob {26 ""}
 addUserKnob {20 endGroup n -1}
 addUserKnob {20 grp_ocio l OCIO n 1}
 grp_ocio 0
 addUserKnob {41 key1 T BakerWrite.key1}
 addUserKnob {41 value1 -STARTLINE T BakerWrite.value1}
 addUserKnob {41 key2 T BakerWrite.key2}
 addUserKnob {41 value2 -STARTLINE T BakerWrite.value2}
 addUserKnob {41 key3 T BakerWrite.key3}
 addUserKnob {41 value3 -STARTLINE T BakerWrite.value3}
 addUserKnob {41 key4 T BakerWrite.key4}
 addUserKnob {41 value4 -STARTLINE T BakerWrite.value4}
 addUserKnob {26 ""}
 addUserKnob {20 endGroup_1 n -1}
 addUserKnob {26 spacer8 l "" +STARTLINE T "     "}
 addUserKnob {6 ignoreOnRender l "Ignore during rendering" t "If this is checked, the NukeBake node will switch to Live View during rendering. Useful for if your bake is a lower quality proxy." +STARTLINE}
 addUserKnob {20 grp_python l Python +INVISIBLE n 1}
 addUserKnob {41 beforeRender l "Before Render" T BakerWrite.beforeRender}
 addUserKnob {41 beforeFrameRender l "Before Each Frame" T BakerWrite.beforeFrameRender}
 addUserKnob {41 afterFrameRender l "After Each Frame" T BakerWrite.afterFrameRender}
 addUserKnob {41 afterRender l "After Render" T BakerWrite.afterRender}
 addUserKnob {41 renderProgress l "Render Progress" T BakerWrite.renderProgress}
 addUserKnob {20 endGroup_2 n -1}
 addUserKnob {1 store_color l "" -STARTLINE +INVISIBLE}
 store_color #FFFFFF
 addUserKnob {20 tab_storage l "\[WIP] Storage"}
 addUserKnob {26 spacer6 l "" +STARTLINE T " "}
 addUserKnob {22 button_refreshStorage l <b>REFRESH</b> t "Refreshes the list of bakes in use aswell as file sizes." T "bkr_bakesize = str(round(bkr_get_folder_size(nuke.script_directory()+\"/nukebake/\"+os.path.splitext(os.path.basename(nuke.scriptName()))\[0]),2))+\" MB\"\n\nnuke.thisNode().knob('txt_totalStorageSize').setValue(\"<b>\"+bkr_bakesize+\"</b\")" +STARTLINE}
 addUserKnob {22 button_openBakeDir l "<b>OPEN DIRECTORY</b>" t "Opens the directory containing your bakes." -STARTLINE T "#import os\n#import subprocess\n#import sys\n\n\ndef open_in_file_explorer(directory):\n    if sys.platform.startswith('win'):\n        os.startfile(directory)\n    elif sys.platform.startswith('darwin'):\n        subprocess.Popen(\[\"open\", directory])\n    elif sys.platform.startswith('linux'):\n        subprocess.Popen(\[\"xdg-open\", directory])\n    else:\n        print(\"Unsupported platform.\")\n\n\ndirectory_path = nuke.script_directory()+\"/nukebake/\"+os.path.splitext(os.path.basename(nuke.scriptName()))\[0]\nopen_in_file_explorer(directory_path)\n"}
 addUserKnob {26 spacer5 l "" +STARTLINE T " "}
 addUserKnob {26 txt_totalStorageSize l "Total bake size:" T "<b>0 MB</b"}
 addUserKnob {26 ""}
 addUserKnob {26 txt_betaNotice1 l "" +STARTLINE T "<b><font color=\"#FF0000\">This is a feature which is planned to be added in the future.</font></b>"}
 addUserKnob {26 txt_betaNotice2 l "" +STARTLINE T "<b><font color=\"#FF0000\">Small demonstration can be seen below. Names and values not accurate.</font></b>"}
 addUserKnob {26 spacer7 l "" +STARTLINE T "    "}
 addUserKnob {26 txt_storage_Jack_Emerald_name l " " T "<b><font color=\"#50C878\">Jack_Emerald</font></b> (100 MB) (F 0-100)"}
 addUserKnob {22 button_storage_Jack_Emerald_read l Read +STARTLINE}
 addUserKnob {22 button_storage_Jack_Emerald_delete l Delete -STARTLINE}
 addUserKnob {26 spacerAfter_Jack_Emerald l "" +STARTLINE T "     "}
 addUserKnob {26 txt_storage_Bob_Green_name l " " T "<b><font color=\"#008000\">Bob_Green</font></b> (2500 MB) (F 100-750)"}
 addUserKnob {22 button_storage_Bob_Green_read l Read +STARTLINE}
 addUserKnob {22 button_storage_Bob_Green_delete l Delete -STARTLINE}
 addUserKnob {20 tab_info l Info}
 addUserKnob {26 txt_info l "" +STARTLINE T "<font size=\"6\" color=\"#55BFFF\"><b>NukeBake</b></font><br>\n<i>v1.0.1</i> <br>\n<i>Pelle Nordentoft</i>\n\n<br><br><br>\n\nThis node allows for easy pre-comping.\n\n<br><br>\n\nIt can be as easy as just clicking \"Bake\" and<br>\nusing a pre-generated name, or you can specify<br>\nyour own.\n\n<br><br>\n\nNames and colors are fetched from the 'BKR_NamesAndColors.py' file<br>\nin the toolkit folder, where they can be easily adjusted.<br>\n\n<br><br><br>\n\nA part of the Visual Magic toolkit."}
}
 Input {
  inputs 0
  name Input
  xpos -9
  ypos -460
 }
 Dot {
  name InDot
  xpos 25
  ypos -399
 }
set Nce29400 [stack 0]
 Dot {
  name Dot1
  xpos -85
  ypos -399
 }
 Write {
  channels all
  file_type exr
  compression DWAA
  dw_compression_level 25
  first_part rgba
  colorspace linear
  create_directories true
  checkHashOnRead false
  version 22
  beforeRender "bkr_reader = nuke.toNode(\"BakerRead\")\nbkr_writer = nuke.toNode(\"BakerWrite\")\n\n# Set OCIO keys and values\nbkr_reader.knob(\"key1\").setValue(bkr_writer.knob(\"key1\").getValue())\nbkr_reader.knob(\"value1\").setValue(bkr_writer.knob(\"value1\").getValue())\nbkr_reader.knob(\"key2\").setValue(bkr_writer.knob(\"key2\").getValue())\nbkr_reader.knob(\"value2\").setValue(bkr_writer.knob(\"value2\").getValue())\nbkr_reader.knob(\"key3\").setValue(bkr_writer.knob(\"key3\").getValue())\nbkr_reader.knob(\"value3\").setValue(bkr_writer.knob(\"value3\").getValue())\nbkr_reader.knob(\"key4\").setValue(bkr_writer.knob(\"key4\").getValue())\nbkr_reader.knob(\"value4\").setValue(bkr_writer.knob(\"value4\").getValue())"
  afterRender "# Set file on Read\nnuke.toNode('BakerRead').knob(\"file\").setValue(nuke.thisNode().knob(\"file\").getValue())\n\n# Switch to using read over passthrough\nnuke.toNode('BakerSwitch').knob(\"which\").setValue(1)\nnuke.thisNode().parent().knob('button_passthrough').setVisible(True)\n\n# Update \"Displaying\"\nbkr_internal_update_displaying()"
  name BakerWrite
  knobChanged "# Update Read node path, only if file exists (ignoring frame number)\nif bkr_check_for_file(nuke.thisNode().knob(\"file\").getValue(), \"_\"):\n    nuke.toNode('BakerRead').knob(\"file\").setValue(nuke.thisNode().knob(\"file\").getValue())\n    \n    # Find new frame range\n    folderpath = bkr_split_by_last_char(nuke.thisNode().knob('file').getValue(), \"/\")\[0]\n    minframe, maxframe = bkr_find_min_max_frame_number(folderpath)\n    #nuke.message(str(minframe)+\", \"+str(maxframe))\n    nuke.toNode('BakerRead').knob('first').setValue(minframe)\n    nuke.toNode('BakerRead').knob('last').setValue(maxframe)\nelse: # If the paths no longer match (meaning they weren't updated)\n    # Switch back to live view\n    nuke.toNode('BakerSwitch').knob('which').setValue(0)\n    # Hide live view button incase switch doesn't manage to\n    nuke.thisNode().parent().knob('button_passthrough').setVisible(False)\n\n"
  xpos -119
  ypos -354
 }
 Read {
  inputs 0
  file_type exr
  last 100
  origset true
  version 51
  colorspace linear
  raw {{parent.BakerWrite.raw}}
  name BakerRead
  knobChanged "if nuke.thisKnob().name() == \"file\":\n    bkr_internal_update_displaying()"
  xpos -119
  ypos -282
 }
 Dot {
  name Dot3
  xpos -85
  ypos -149
 }
push $Nce29400
 Switch {
  inputs 2
  name BakerSwitch
  knobChanged "bkr_internal_update_displaying()\n\n# If using 0, hide Live View button, else reveal it\nif nuke.thisNode().knob('which').getValue() == 0:\n    nuke.thisNode().parent().knob('button_passthrough').setVisible(False)\nelse:\n    nuke.thisNode().parent().knob('button_passthrough').setVisible(True)\n\n"
  label "Using: \[value which]"
  xpos -9
  ypos -158
  disable {{"(\[python nuke.executing()] == 1) && (parent.ignoreOnRender == 1) ? 1 : 0"}}
  addUserKnob {20 User}
  addUserKnob {6 testbox l "" +STARTLINE +STARTLINE}
  testbox true
 }
 Output {
  name Output
  xpos -9
  ypos 1
 }
end_group
